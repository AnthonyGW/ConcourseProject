groups:
- name: ci_tasks
  jobs:
  - cpbackend_unit_tests
  - cpbackend_integration_test
  - create_backendbuild
  - cache
  - cpfrontend_unit_tests
  - cpfrontend_integration_test
- name: cd_tasks
  jobs:
  - cpbackend_deploy_testing
  - cpfrontend_deploy_testing

resource_types:
- name: npm-cache
  type: docker-image
  source: 
    repository: tonywaithaka/module-resource-cache
    tag: "latest"

resources:
- name: cp_github_repo
  type: git
  source: &repo_source
    uri: https://github.com/AnthonyGW/ConcourseProject.git
    branch: testing

- name: npm-repo-cache
  type: npm-cache
  source:
    <<: *repo_source
    project-path: /src_frontend/
    paths:
    - package.json

- name: cpbackend_build
  type: git
  source:
    uri: git@github.com:AnthonyGW/BackendBuild.git
    branch: testing
    private_key: |
      ((private-repo-key))

- name: cpfrontend_build
  type: git
  source:
    uri: https://github.com/AnthonyGW/FrontendBuild.git
    branch: testing
    private_key: |
      ((private-repo-key))

jobs:
- name: cpbackend_unit_tests
  serial: true
  serial_groups: [ci-one]
  plan:
  - aggregate:
    - get: cp_github_repo
      trigger: true
  - task: run_backend_tests
    file: cp_github_repo/src_backend/ci/Scripts/unit_task.yml

- name: cpbackend_integration_test
  serial: true
  serial_groups: [ci-one]
  plan:
  - aggregate:
    - get: cp_github_repo
      trigger: true
  - task: run_backend_integration_test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ubuntu}
      run:
        path: echo
        args: ["Make a new task yml and execute bash script to run merge test"]
  # - task: make_build
  #   config:
  #     platform: linux
  #     image_resource:
  #       type: docker-image
  #       source: {repository: ubuntu}
  #     inputs:
  #     - name: cp_github_repo
  #     outputs:
  #     - name: cpbackend_newbuild
  #     run:
  #       path: sh
  #       args:
  #       - -exc
  #       - |
  #         cp cp_github_repo/src_backend cpbackend_newbuild
  # - put: cpbackend_newbuild
  #   resource: git-resource


- name: create_backendbuild
  plan:
  - get: cpbackend_build
  - get: cp_github_repo
    trigger: true
    passed: [cpbackend_integration_test]
  - task: make_build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: 
          repository: tonywaithaka/python_buildenv
          tag: 'latest'
      inputs:
      - name: cp_github_repo
      - name: cpbackend_build
      outputs:
      - name: cpbackend_newbuild
      run:
        path: sh
        args:
        - -exc
        - |
          echo "Execute script to make a build version from source code"
          cp -af cp_github_repo/src_backend/. cpbackend_build
          cp -a cpbackend_build/. cpbackend_newbuild
          ls -a cpbackend_newbuild
          # git init
          cd cpbackend_newbuild
          git add .
          git config user.email "concourse@ci"
          git config user.name "ConcourseTesting"
          git commit -m "New build $(date)"
  - put: cpbackend_build
    params:
      repository: cpbackend_newbuild
  # - task: make_new_backend_build
  #   config:
  #     platform: linux
  #     image_resource:
  #       type: docker-image
  #       source: {repository: ubuntu}
  #     run:
  #       path: echo
  #       args: ["Execute script to make a build version from source code"]
  # - put: cpbackend_build
  #   params:
  #     file: cpbackend_newbuild

- name: cpbackend_deploy_testing
  serial: true
  serial_groups: [ci-one]
  plan:
  - get: cpbackend_build
    trigger: true
  - task: deploy_backend_to_testing_server
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ubuntu}
      run:
        path: echo
        args: ["Execute script to remake the infrastructure and deploy the built code"]

- name: cache
  plan:
  - get: cp_github_repo
    trigger: true
  - get: npm-repo-cache

- name: cpfrontend_unit_tests
  serial: true
  plan:
  - aggregate:
    - get: cp_github_repo
      trigger: true
      passed: [cache]
    - get: npm-repo-cache
      passed: [cache]
  - task: run_frontend_tests
    file: cp_github_repo/src_frontend/ci/Scripts/unit_task.yml
  - put: cpfrontend_build

- name: cpfrontend_integration_test
  plan:
  - aggregate:
    - get: cp_github_repo
      trigger: true
      passed: [cpfrontend_unit_tests]
    - get: npm-repo-cache
      passed: [cpfrontend_unit_tests]
    - get: cpfrontend_build
      passed: [cpfrontend_unit_tests]
  - task: run_frontend_integration_test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ubuntu}
      run:
        path: echo
        args: ["Make a new task yml and execute bash script to run merge test"]

- name: cpfrontend_deploy_testing
  serial: true
  plan:
  - get: cpfrontend_build
    trigger: true
    passed: [cpfrontend_integration_test]
  - task: deploy_frontend_to_testing_server
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ubuntu}
      run:
        path: echo
        args: ["Execute script to remake the infrastructure and deploy the built code"]
